generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(cuid())
  email                String   @unique
  password             String
  firstName            String
  lastName             String
  role                 Role?
  emailVerified        Boolean  @default(false)
  emailVerificationToken String? @unique
  emailVerificationExpires DateTime?
  passwordResetToken   String?  @unique
  passwordResetExpires DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  employee              Employee?
  sentInvitations       UserInvitation[]
  acceptedInvitations   UserInvitation[] @relation("AcceptedInvitations")
}

model Employee {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  empId        String   @unique // Organization-specific employee ID
  firstName    String
  lastName     String
  designation  String?  // Employee designation/job title
  joinDate     DateTime
  dateOfBirth  DateTime
  gender       String
  address      String?
  contactInfo  String?

  teamId       String?
  team         Team?     @relation(fields: [teamId], references: [id])

  leaves       LeaveRequest[]
  attendance   Attendance[]
  payslips     Payslip[]
}

model Department {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  teams       Team[]
}

model Team {
  id            String      @id @default(cuid())
  name          String
  description   String?
  departmentId  String
  department    Department  @relation(fields: [departmentId], references: [id])

  employees     Employee[]
}

model LeaveRequest {
  id           String      @id @default(cuid())
  employeeId   String
  employee     Employee    @relation(fields: [employeeId], references: [id])
  startDate    DateTime
  endDate      DateTime
  reason       String
  status       LeaveStatus @default(PENDING)
  createdAt    DateTime    @default(now())
}

model Attendance {
  id               String   @id @default(cuid())
  employeeId       String
  employee         Employee @relation(fields: [employeeId], references: [id])
  date             DateTime
  checkIn          DateTime?
  checkInLatitude  Float?
  checkInLongitude Float?
  checkOut         DateTime?
  checkOutLatitude Float?
  checkOutLongitude Float?
  markedBy         String
}

model Payslip {
  id           String    @id @default(cuid())
  employeeId   String
  employee     Employee  @relation(fields: [employeeId], references: [id])
  month        String
  year         Int
  fileUrl      String
  generatedAt  DateTime  @default(now())
}

model UserInvitation {
  id              String            @id @default(cuid())
  email           String            @unique
  role            Role
  token           String            @unique
  invitedBy       String
  invitedByUser   User              @relation(fields: [invitedBy], references: [id])
  invitedAt       DateTime          @default(now())
  expiresAt       DateTime
  status          InvitationStatus  @default(PENDING)
  acceptedAt      DateTime?
  userId          String?           // Reference to created user
  acceptedUser    User?             @relation("AcceptedInvitations", fields: [userId], references: [id])
}

model SystemLog {
  id           String   @id @default(cuid())
  action       String
  performedBy  String
  timestamp    DateTime @default(now())
}

enum Role {
  superadmin
  admin
  hr
  employee
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}
